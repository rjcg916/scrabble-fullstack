@using Scrabble.Domain

<div class="tile-rack">
    <h3>Tile Rack</h3>
    <div class="tiles">
        @foreach (var tile in Tiles)
        {
            <span class="tile">@tile.Letter</span>
        }
    </div>
    <button @onclick="DrawTiles">Draw Tiles</button>
    <button @onclick="PlaceTiles">Place Tiles</button>
</div>

@code {
    [Parameter]
    public List<Tile> Tiles { get; set; } = new List<Tile>();

    [Parameter]
    public EventCallback<List<Tile>> OnTilesPlacedCallback { get; set; }

    [Parameter]
    public List<Tile> TileBag { get; set; } = new List<Tile>();

    private void DrawTiles()
    {
        // Draw a predefined number of tiles, e.g., 7
        var tileBag = Domain.TileBag.TileBagFactory.Create();

        if (tileBag.Count > 0)
        { 
            var (drawnTiles, updatedTileBag) = tileBag.DrawTiles(new TileDrawCount(7));
            Tiles.AddRange(drawnTiles);
            StateHasChanged(); // Refresh the component
        }
    }

    private void PlaceTiles()
    {
        if (Tiles.Count > 0)
        {
            // Example logic to place tiles - this should be updated to fit your actual game logic
            var tilesToPlace = Tiles.ToList();
            Tiles.Clear();
            OnTilesPlacedCallback.InvokeAsync(tilesToPlace);
            StateHasChanged(); // Refresh the component
        }
    }
}
