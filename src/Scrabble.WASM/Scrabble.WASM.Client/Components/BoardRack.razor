@using Scrabble.Domain
@using Scrabble.WASM.Client.Components

<MudDropContainer T="DropItem" 
                Items="_items"
                ItemIsDisabled="@( (item) => item.IsLocked)"
                CanDropClass="mud-border-info" 
                NoDropClass="mud-border-error" 
                CanDrop="@( (item, identifier ) => _items.Count(x => x.Identifier == identifier ) == 0)" 
                ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" 
                ItemDropped="ItemUpdated" 
                Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>
        @for (int r = 0; r < 15; r++)
        {   
            var row = r.ToString(displayFormat);
            <div class="d-flex">
                @for (int c = 0; c < 15; c++)
                {
                    var col = c.ToString(displayFormat);
                    <MudDropZone T="DropItem" 
                                Identifier="@($"{row}{col}")" 
                                DraggingClass="mud-theme-success" 
                                Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:64px;width:64px;" />
                }
            </div>
        }
    </ChildContent>
    <ItemRenderer>
        <div Disabled="@(context.IsLocked )" 
             class="d-flex justify-center align-center flex-grow-1">
             <ScrabbleTile Letter="@context.Name" Score="@context.Score"></ScrabbleTile>
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private const string  displayFormat = "D2";

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem() { Name="B", Identifier="0707", Score=1, IsLocked=true  },        
        new DropItem() { Name="A", Identifier="0708", Score=2, IsLocked=false },
        new DropItem() { Name="T", Identifier="0709", Score=3, IsLocked=false }

    };

    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
        public int Score { get; init; }
        public bool IsLocked { get; set; }
    }
    // static string GetSquareClass(SquareType st)  { 
    //     var sqStyle = st switch
    //     {
    //         SquareType.dl => "tile double-letter",
    //         SquareType.dw => "tile double-word",
    //         SquareType.tl => "tile triple-letter",
    //         SquareType.tw => "tile triple-word",
    //         SquareType.start => "tile start",
    //         _ => "tile"
    //     };
    //     return $"{sqStyle} d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default";
    // }
}