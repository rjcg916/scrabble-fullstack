@using Scrabble.Domain
@using Scrabble.WASM.Client.Components

<MudDropContainer T="DropSquare" 
                Items="_tiles"
                ItemIsDisabled="@( (item) => item.IsLocked)"
                CanDrop="@( (item, identifier ) => _tiles.Count(x => x.Identifier == identifier ) == 0)" 
                ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" 
                ItemDropped="ItemUpdated"
                CanDropClass="mud-border-info"
                NoDropClass="mud-border-error"
                Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>
        <div class="tile-rack">
            <h3>Tile Rack</h3>
            <div class="d-flex">
                @for (int s = 0; s < 7; s++)
                {
                    var slotStr = s.ToString();
                    <MudDropZone T="DropSquare"
                                 Identifier="@($"{slotStr}")"
                                 DraggingClass="mud-theme-success"
                                 Class="justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:64px;width:64px;" />
                }
            </div>
        </div>
        <div class="tile-board">
            <h3>Board</h3>
            @for (int r = 0; r < 15; r++)
            {   
                var rowStr = r.ToString(displayFormat);
                <div class="d-flex">
                    @for (int c = 0; c < 15; c++)
                    {
                        var colStr = c.ToString(displayFormat);
                        var squareType = SquareType.reg;
                        squareType = board.squares[r, c].SquareType;
                        <MudDropZone T="DropSquare" 
                            Identifier="@($"{rowStr}{colStr}")" 
                            DraggingClass="mud-theme-success" 
                            Class=@GetSquareClass(squareType) Style=@GetSquareStyle(squareType) />
                    }
                </div>
            }
        </div>

    </ChildContent>
    <ItemRenderer>
        <div Disabled="@(context.IsLocked)"
             class="d-flex justify-center align-center flex-grow-1"
             style="height: 100%; width: 100%;">
            <ScrabbleTile Letter="@context.Name" Score="@context.Score" ></ScrabbleTile>
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {

    [Parameter]
    public Board board { get; set; } = new Board((s) => true);

    [Parameter]
    public Rack rack { get; set; } = new Rack();

    private List<DropSquare> _tiles = new();

    protected override void OnInitialized()
    {
        LoadBoard();
        LoadRack();
    }

    private void LoadBoard()
    {
        for (int r = 0; r < Coord.RowCount; r++)
        {
            var row = r.ToString(displayFormat);
            for (int c = 0; c < Coord.ColCount; c++)
            {
                var col = c.ToString(displayFormat);

                var square = board.squares[r, c];

                if (square.IsOccupied)
                {
                    _tiles.Add(
                             new DropSquare() { 
                                        Name = square.Tile.Letter.ToString(), 
                                        Identifier = $"{row}{col}", 
                                        Score = square.Tile.Value, 
                                        IsLocked = true });
                }

            }
        }
    }

    private void LoadRack()
    {
       
        for (var s = 0; s < rack.TileCount; s++)
        {
            var slot = s.ToString();
            var tile = rack.Tiles[s];
            _tiles.Add(new DropSquare()
                    {
                        Name = tile.Letter.ToString(),
                        Identifier = $"{slot}",
                        Score = tile.Value,
                        IsLocked=false
                    });
        }

    }

    private const string  displayFormat = "D2";

    private void ItemUpdated(MudItemDropInfo<DropSquare> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }


    public class DropSquare
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
        public int Score { get; init; }
        public bool IsLocked { get; set; }
    }

    static string GetSquareClass(SquareType st)  { 
        var sqStyle = st switch
        {
            SquareType.dl => "tile double-letter",
            SquareType.dw => "tile double-word",
            SquareType.tl => "tile triple-letter",
            SquareType.tw => "tile triple-word",
            SquareType.start => "tile start",
            _ => "tile"
        };
        return $"{sqStyle} d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default";
    }

    static string GetSquareStyle(SquareType st)
    {
        var ss = st switch
        {
            SquareType.dl => "background-color: #ccccff;",
            SquareType.dw => "background-color: #ffcccc;",
            SquareType.tl => "background-color: #9999ff;",
            SquareType.tw => "background-color: #ff9999",
            SquareType.start => "background-color: #ffffcc;",
            _ => "background-color: #f4f4f4;"
        };

        return $"{ss} height:64px;width:64px;";
    }
}