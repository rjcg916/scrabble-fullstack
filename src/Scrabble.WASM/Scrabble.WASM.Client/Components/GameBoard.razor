@inject Services.GameService GameService

<MudDropContainer T="DropSquare"
                  Items="tiles"
                  ItemIsDisabled="@( (item) => item.IsLocked)"
                  ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
                  ItemDropped="OnItemDropped"
                  CanDrop="OnCanDrop"
                  CanDropClass="mud-border-info"
                  NoDropClass="mud-border-error"
                  Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>
        <div class="tile-rack">
            <h3>Tile Rack</h3>
            <div class="d-flex">
                @for (int s = 0; s < Domain.Rack.Capacity; s++)
                {                   
                    <MudDropZone T="DropSquare"
                                 Identifier="@($"{ToSlot(s)}")"
                                 DraggingClass="mud-theme-success"
                                 Class="justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default"
                                 Style="height:64px;width:64px;" />
                }
            </div>
        </div>
        <div class="tile-board">
            <h3>Board</h3>
            @for (int r = 0; r < 15; r++)
            {
                <div class="d-flex">
                    @for (int c = 0; c < 15; c++)
                    {
                        var squareType = board.squares[r, c].SquareType;
                        <MudDropZone T="DropSquare"
                                     Identifier="@($"{ToCoord(r,c)}")"
                                     DraggingClass="mud-theme-success"
                                     Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default"
                                     Style="@($"height:64px;width:64px;{GetSquareStyle(squareType)}")" />
                    }
                </div>
            }
        </div>
    </ChildContent>
    <ItemRenderer>
        <div Disabled="@(context.IsLocked)"
             class="d-flex justify-center align-center flex-grow-1"
             style="height: 100%; width: 100%;">
            <BoardTile Letter="@context.Name" Score="@context.Value"> </BoardTile>
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter]
    public Rack rack { get; set; }

    [Parameter]
    public Board board { get; set; }

    private List<DropSquare> tiles { get; set; } = new();

    protected override void OnInitialized()
    {
        GameService.OnMoveRequest += HandleMoveRequest;
        LoadRack();
        LoadBoard();
    }


    public void Dispose()
    {
        GameService.OnMoveRequest -= HandleMoveRequest;
    }

    private async Task HandleMoveRequest()
    {
        SubmitMove();
        await InvokeAsync(StateHasChanged);
    }

    private void LoadRack()
    {
        for (var s = 0; s < rack.TileCount; s++)
        {
            var tile = rack.Tiles[s];
            tiles.Add(new DropSquare()
                {
                    Name = tile.Letter,
                    Identifier = $"{ToSlot(s)}",
                    Value = tile.Value,
                    IsLocked = false
                });
        }
    }

    private void LoadBoard()
    {
        for (int r = 0; r < Coord.RowCount; r++)
        {          
            for (int c = 0; c < Coord.ColCount; c++)
            {     
                var square = board.squares[r, c];

                if (square.IsOccupied)
                {
                    tiles.Add(
                             new DropSquare()
                                 {
                                     Name = square.Tile.Letter,
                                     Identifier = $"{ToCoord(r,c)}",
                                     Value = square.Tile.Value,
                                     IsLocked = true
                                 });
                }
            }
        }
    }

    private bool OnCanDrop(DropSquare dropSquare, string identifier)
    {
        if (IsOccupied(identifier))
            return false;

        // drop tile on vacant rack space always allowed
        if (IsOnRack(identifier))
            return true;

        // validate board move
        return ValidMove(dropSquare, identifier);
    }

    private bool ValidMove(DropSquare dropSquare, string identifier)
    {
        // is board drop location valid?

        // get previously dragged Tiles
        var proposedTilePlacements = GetCurrentMoveTiles();

        // union new Tile and previously dragged tiles
        var newTile = new TilePlacement(GetCoord(identifier), new Tile(dropSquare.Name));
        var testTilePlacements = proposedTilePlacements.Append(newTile).ToList();

        // are tiles contiguous with existing tiles?
        var (IsContiguous, _) = board.TilesContiguous(testTilePlacements);

        var IsFirstMove = (proposedTilePlacements.Count() == 0);
        var IsUnidirectional = IsFirstMove ||
                                Move.UniDirectionalMove(testTilePlacements);

        return IsContiguous && IsUnidirectional;
    }

    private IEnumerable<TilePlacement> GetCurrentMoveTiles()
    {
        var proposedTiles = tiles.Where(x => IsOnBoard(x.Identifier) && !x.IsLocked);
        return proposedTiles.Select(i => new TilePlacement(GetCoord(i.Identifier), new Tile(i.Name)));
    }

    private bool IsOccupied(string id) =>
        tiles.Count(x => x.Identifier == id) > 0;

    // id format: 1 char rack, 4 char board : row (2 char), col (2 char)

    private bool IsOnRack(string id) =>
        id.Length == 1;

    private string ToSlot(int slot) =>
        slot.ToString("D1");

    private bool IsOnBoard(string id) =>
        id.Length == 4;

    private string ToCoord(int row, int col)
    {
        const string displayFormat = "D2";
        return $"{row.ToString(displayFormat)}{col.ToString(displayFormat)}";
    }

    private Coord GetCoord(string id) =>
        new Coord(int.Parse(id.Substring(0, 2)), int.Parse(id.Substring(2, 2)));

    private void SubmitMove()
    {
        // get move and submit
        // move tiles are only allowed if valid

        var proposedTilePlacements = GetCurrentMoveTiles();
        // lock tiles on display board
        // add tiles to "board" data structure 

    }

    private void OnItemDropped(MudItemDropInfo<DropSquare> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        dropItem.Item.IsLocked = false;
        DisplayCurrentMoveScore();
    }

    private void DisplayCurrentMoveScore()
    {
        var move = MoveFactory.CreateMove(GetCurrentMoveTiles().ToList());
        var score = new Score(board, move).Calculate();           
    }

    static string GetSquareStyle(SquareType st)
    {
        return st switch
        {
            SquareType.dl => "background-color: #ccccff;",
            SquareType.dw => "background-color: #ffcccc;",
            SquareType.tl => "background-color: #9999ff;",
            SquareType.tw => "background-color: #ff9999",
            SquareType.start => "background-color: #ffffcc;",
            _ => "background-color: #f4f4f4;"
        };

    }

}