@inject Services.GameService GameService
@using static Scrabble.WASM.Client.Helpers.DropZoneId

<style>
    .tile-rack h3 {
        margin: 0;
    }

    .tile-rack .d-flex {
        display: flex;
    }

    .tile-board h3 {
        margin: 0;
    }

    .tile-board .d-flex {
        display: flex;
    }
</style>

<MudCard>
    <MudCardContent>
        <MudTextField @bind-Value="ValidMoveMessage"> </MudTextField>
        <MudTextField @bind-Value="ValidMoveScore"></MudTextField>
    </MudCardContent>
</MudCard>

<MudDropContainer T="DropSquare"
                  Items="tiles"
                  ItemIsDisabled="@( (item) => item.IsLocked)"
                  ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
                  ItemDropped="OnItemDropped"
                  CanDrop="OnCanDrop"
                  CanDropClass="mud-border-info"
                  NoDropClass="mud-border-error"
                  Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>
        <div class="tile-rack">
            <h3>Tile Rack</h3>
            <div class="d-flex">
                @for (int s = 0; s < Domain.Rack.Capacity; s++)
                {
                    <RackSquare squareId="@ToId(s)"></RackSquare>
                }
            </div>
        </div>
        <div class="tile-board">
            <h3>Board</h3>
            @for (int r = 0; r < 15; r++)
            {
                <div class="d-flex">
                    @for (int c = 0; c < 15; c++)
                    {
                        var squareType = board.squares[r, c].SquareType;
                        <BoardSquare squareType="@squareType" squareId="@ToId(r,c)"></BoardSquare>
                    }
                </div>
            }
        </div>
    </ChildContent>
    <ItemRenderer>
        <div Disabled="@(context.IsLocked)"
             class="d-flex justify-center align-center flex-grow-1"
             style="height: 100%; width: 100%;">
            <BoardTile Letter="@context.Name" Score="@context.Value"> </BoardTile>
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter]
    public Rack rack { get; set; }

    [Parameter]
    public Board board { get; set; }

    private List<DropSquare> tiles { get; set; } = new();

    private string ValidMoveMessage { get; set; } = "No Tiles Placed";
    private string ValidMoveScore { get; set; } = "0";

    protected override void OnInitialized()
    {
        GameService.OnMoveRequest += HandleMoveRequest;
        LoadBoard();
        LoadRack();
    }

    public void Dispose()
    {
        GameService.OnMoveRequest -= HandleMoveRequest;
    }

    private async Task HandleMoveRequest()
    {
        SubmitMove();
    }

    private void LoadRack()
    {
        tiles.AddRange(
            rack.Tiles.Select((tile, s) => new DropSquare
                {
                    Name = tile.Letter,
                    Identifier = $"{ToId(s)}",
                    Value = tile.Value,
                    IsLocked = false
                })
        );
    }
    private void LoadBoard()
    {
        tiles = (from r in Enumerable.Range(0, Coord.RowCount)
                 from c in Enumerable.Range(0, Coord.ColCount)
                 let square = board.squares[r, c]
                 where square.IsOccupied
                 select new DropSquare
                     {
                         Name = square.Tile.Letter,
                         Identifier = $"{ToId(r, c)}",
                         Value = square.Tile.Value,
                         IsLocked = true
                     }).ToList();
    }



    private IEnumerable<TilePlacement> GetCurrentMoveTiles()
    {
        var proposedTiles = tiles.Where(x => IsOnBoard(x.Identifier) && !x.IsLocked);
        return proposedTiles.Select(i => new TilePlacement(GetCoord(i.Identifier), new Tile(i.Name)));
    }

    private bool OnCanDrop(DropSquare dropSquare, string identifier) =>
        !IsOccupied(identifier);

    private bool IsOccupied(string id) =>
        tiles.Count(x => x.Identifier == id) > 0;

    private void SubmitMove()
    {
        // get move and submit
        // move tiles are only allowed if valid

        var proposedTilePlacements = GetCurrentMoveTiles();
        // check for valid words
        // lock tiles on display board
        // add tiles to "board" data structure
    }


    private void OnItemDropped(MudItemDropInfo<DropSquare> dropItem)
    {
        //Console.WriteLine($"tile: source (name): {dropItem.Item.Name} source(id): {dropItem.Item.Identifier} target: {dropItem.DropzoneIdentifier}");

        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;

        UpdateMessages();
    }

    private void UpdateMessages()
    {
        var currentTilePlacements = GetCurrentMoveTiles().ToList();
        var (valid, msg) = board.IsMoveValid(currentTilePlacements);

        ValidMoveMessage = valid ? "Valid" : String.Join(", ", msg.Select(i => i.ToString()));

        ValidMoveScore = "0";
        if (valid)  {
            var score = board.ScoreMove(MoveFactory.CreateMove(currentTilePlacements));
            ValidMoveScore = score.ToString();
        }
    }
}