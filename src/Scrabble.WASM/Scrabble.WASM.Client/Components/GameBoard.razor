@inject Services.GameService GameService
@using static Scrabble.WASM.Client.Helpers.DropZoneId


<style>
    .tile-rack h3 {
        margin: 0;
    }

    .tile-rack .d-flex {
        display: flex;
    }

    .tile-board h3 {
        margin: 0;
    }

    .tile-board .d-flex {
        display: flex;
    }
</style>

<MudCard>
    <MudCardContent>
        <MudTextField @bind-Value="IsCurrentMoveValid"></MudTextField>
        <MudTextField @bind-Value="BoardMessages"> </MudTextField>
        <MudTextField @bind-Value="CurrentMoveScore"></MudTextField>
    </MudCardContent>
</MudCard>


<MudDropContainer T="DropSquare"
                  Items="tiles"
                  ItemIsDisabled="@( (item) => item.IsLocked)"
                  ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
                  ItemDropped="OnItemDropped"
                  CanDrop="OnCanDrop"
                  CanDropClass="mud-border-info"
                  NoDropClass="mud-border-error"
                  Class="border-2 border-solid mud-border-lines-default">
                  <ChildContent>
        <div class="tile-rack">
            <h3>Tile Rack</h3>
            <div class="d-flex">
                @for (int s = 0; s < Domain.Rack.Capacity; s++)
                {
                    <RackSquare squareId="@ToId(s)"></RackSquare>
                }
            </div>
        </div>
        <div class="tile-board">
            <h3>Board</h3>
            @for (int r = 0; r < Coord.RowCount; r++)
            {
                <div class="d-flex">
                    @for (int c = 0; c < Coord.ColCount; c++)
                    {
                        var squareType = board.squares[r, c].SquareType;
                        <BoardSquare squareType="@squareType" squareId="@ToId(r,c)"></BoardSquare>
                    }
                </div>
            }
        </div>
    </ChildContent>
    <ItemRenderer>
        <div Disabled="@(context.IsLocked)"
             class="d-flex justify-center align-center flex-grow-1"
             style="height: 100%; width: 100%;">
            <BoardTile Letter="@context.Name" Score="@context.Value"> </BoardTile>
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter]
    public Rack rack { get; set; }

    [Parameter]
    public Board board { get; set; }

    [Parameter]
    public int CurrentPlayer { get; set; }

    private List<DropSquare> tiles { get; set; } = new();

    private const string VALIDMOVEMSG = "Valid";

    private bool IsCurrentMoveValid = false;
    private int CurrentMoveScore = 0;
    private Move? CurrentMove = null;
    private string BoardMessages = "";


    protected override void OnInitialized()
    {

        GameService.OnMoveRequest += HandleMoveRequest;
    }

    protected override void OnParametersSet()
    {


            tiles.AddRange(
                rack.Tiles.Select((tile, s) => new DropSquare
                    {
                        Name = tile.Letter,
                        Identifier = $"{ToId(s)}",
                        Value = tile.Value,
                        IsLocked = false
                    }));

            tiles.AddRange(
                    (from r in Enumerable.Range(0, Coord.RowCount)
                     from c in Enumerable.Range(0, Coord.ColCount)
                     let square = board.squares[r, c]
                     where square.IsOccupied
                     select new DropSquare
                         {
                             Name = square.Tile.Letter,
                             Identifier = $"{ToId(r, c)}",
                             Value = square.Tile.Value,
                             IsLocked = true
                         }));
   
    }

    public void Dispose()
    {
        GameService.OnMoveRequest -= HandleMoveRequest;
    }

    private async Task HandleMoveRequest()
    {
        SubmitMove();
    }

    private IEnumerable<TilePlacement> GetCurrentMoveTiles()
    {
        var proposedTiles = tiles.Where(x => IsOnBoard(x.Identifier) && !x.IsLocked);
        return proposedTiles.Select(i => new TilePlacement(GetCoord(i.Identifier), new Tile(i.Name)));
    }

    private bool OnCanDrop(DropSquare dropSquare, string identifier) =>
        !IsOccupied(identifier);

    private bool IsOccupied(string id) =>
        tiles.Count(x => x.Identifier == id) > 0;

    private void SubmitMove()
    {
        if (!IsCurrentMoveValid)
            throw new Exception("Can't Submit Move that is not valid");

        // TODO
        // lock tiles on display board
        // add move to board
        // reset rack
    }

    private void OnItemDropped(MudItemDropInfo<DropSquare> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;

        var currentTilePlacements = GetCurrentMoveTiles().ToList();

        UpdateBoardStatus(currentTilePlacements);
    }

    private void UpdateBoardStatus(List<TilePlacement> currentTilePlacements)
    {

        void ResetBoardStatus()
        {
            IsCurrentMoveValid = true;
            CurrentMoveScore = 0;
            CurrentMove = null;
            BoardMessages = "";
        }

        void SetInvalidMoveStatus(List<PlacementError> errors)
        {
            IsCurrentMoveValid = false;
            CurrentMoveScore = 0;
            CurrentMove = null;
            BoardMessages = $"Error at {errors.First().Location.ToDisplayString()} :: {string.Join(", ", errors.Select(m => m.Letters))}";
        }

        void SetValidMoveStatus(Move move)
        {
            List<TilePlacement> tilePlacements = [.. move.TilePlacements.OrderBy(tp => tp.Coord.RVal).OrderBy(tp => tp.Coord.CVal)];

            IsCurrentMoveValid = true;
            CurrentMoveScore = board.ScoreMove(move);
            CurrentMove = move;
            BoardMessages = $"{VALIDMOVEMSG} at {move.TilePlacements[0].Coord.ToDisplayString()} :: {string.Join(", ", tilePlacements.Select(tp => tp.Tile.Letter))}";
        }

        if (currentTilePlacements.Count == 0)
        {
            ResetBoardStatus();
            return;
        }

        var (isValid, errors) = board.IsMoveValid(currentTilePlacements);

        if (!isValid)
        {
            SetInvalidMoveStatus(errors);
            return;
        }

        SetValidMoveStatus(MoveFactory.CreateMove(currentTilePlacements));
    }
}