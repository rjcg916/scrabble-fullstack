@inject Services.GameService GameService

@using Scrabble.WASM.Client.Helpers
@using static Scrabble.WASM.Client.Helpers.DropZoneId  

<MudDropContainer T="DropSquare"
                  Items="tiles"
                  ItemIsDisabled="@( (item) => item.IsLocked)"
                  ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
                  ItemDropped="OnItemDropped"
                  CanDrop="OnCanDrop"
                  CanDropClass="mud-border-info"
                  NoDropClass="mud-border-error"
                  Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>
        <RackSquares ToId="@(DropZoneId.ToId)" rack="rack" tiles="tiles"></RackSquares>
        <BoardSquares ToId="@(DropZoneId.ToId)" board="board" tiles="tiles"></BoardSquares>
    </ChildContent>
    <ItemRenderer>
        <div Disabled="@(context.IsLocked)"
             class="board-tile">
            <BoardTile Letter="@context.Name" Score="@context.Value"> </BoardTile>
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter]
    public Rack rack { get; set; }

    [Parameter]
    public Board board { get; set; }

    private List<DropSquare> tiles { get; set; } = new();

    protected override void OnInitialized()
    {
        GameService.OnMoveRequest += HandleMoveRequest;
    }

    public void Dispose()
    {
        GameService.OnMoveRequest -= HandleMoveRequest;
    }

    private async Task HandleMoveRequest()
    {
        SubmitMove();
        await InvokeAsync(StateHasChanged);
    }

    private bool OnCanDrop(DropSquare dropSquare, string identifier)
    {
        if (IsOccupied(identifier))
            return false;

        // drop tile on vacant rack space always allowed
        if (IsOnRack(identifier))
            return true;

        // validate board move
        return ValidMove(dropSquare, identifier);
    }

    private bool ValidMove(DropSquare dropSquare, string identifier)
    {
        // is board drop location valid?

        // get previously dragged Tiles
        var proposedTilePlacements = GetCurrentMoveTiles();

        // union new Tile and previously dragged tiles
        var newTile = new TilePlacement(GetCoord(identifier), new Tile(dropSquare.Name));
        var testTilePlacements = proposedTilePlacements.Append(newTile).ToList();

        // are tiles contiguous with existing tiles?
        var (IsContiguous, _) = board.TilesContiguous(testTilePlacements);

        var IsFirstMove = (proposedTilePlacements.Count() == 0);
        var IsUnidirectional = IsFirstMove ||
                                Move.UniDirectionalMove(testTilePlacements);

        return IsContiguous && IsUnidirectional;
    }

    private IEnumerable<TilePlacement> GetCurrentMoveTiles()
    {
        var proposedTiles = tiles.Where(x => IsOnBoard(x.Identifier) && !x.IsLocked);
        return proposedTiles.Select(i => new TilePlacement(GetCoord(i.Identifier), new Tile(i.Name)));
    }

    private bool IsOccupied(string id) =>
        tiles.Count(x => x.Identifier == id) > 0;

    private void SubmitMove()
    {
        // get move and submit
        // move tiles are only allowed if valid

        var proposedTilePlacements = GetCurrentMoveTiles();
        // check for valid words
        // lock tiles on display board
        // add tiles to "board" data structure 
    }

    private void OnItemDropped(MudItemDropInfo<DropSquare> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        dropItem.Item.IsLocked = false;
        DisplayCurrentMoveScore();
    }

    private void DisplayCurrentMoveScore()
    {
        var move = MoveFactory.CreateMove(GetCurrentMoveTiles().ToList());
        var score = new Score(board, move).Calculate();           
    }
}
