@page "/"
@inject Services.GameService GameService
<PageTitle>Scrabble</PageTitle>

<GameControl></GameControl>
<GameBoard board="@board" rack="@playerList[currentPlayer].Rack" CurrentPlayer="@currentPlayer" ></GameBoard>

@code {
    private static Lexicon lexicon = new Lexicon();
    TileBag tileBag = TileBag.TileBagFactory.Create().Shuffle();


    private Board board = new((s) => true);

    private List<Player>  playerList = 
        new List<Player>(new List<Player>() { new Player("1"), new Player("2")});

    private Move? currentMove;

    private int currentPlayer = 0;

    private bool IsBoardValid = true;

    protected override void OnInitialized()
    {
        GameService.OnMoveRequest += HandleMoveButtonClicked;

        List<Tile> rackTiles;

        (rackTiles, tileBag) = tileBag.DrawTiles(new TileDrawCount( Rack.Capacity));
        
        // build player list with racks
        var p1 = playerList[0];
        p1.Rack = new Rack();
        p1.Rack = p1.Rack.AddTiles(rackTiles);
        p1.Score = 10;

        (rackTiles, tileBag) = tileBag.DrawTiles(new TileDrawCount(Rack.Capacity));
 
        var p2 = playerList[1];
        p2.Rack = new Rack();
        p2.Rack = p2.Rack.AddTiles(rackTiles);
        p2.Score = 20;

        // initialize board

        var boardTiles = new List<TilePlacement>
            {
                new(new Coord(R._8, C.H), new Tile('B')),
                new(new Coord(R._8, C.I), new Tile('A')),
                new(new Coord(R._8, C.J), new Tile('L')),
                new(new Coord(R._8, C.K), new Tile('L'))
            };
        board.MakeMove(MoveFactory.CreateMove(boardTiles));

    }

    private async Task HandleMoveButtonClicked()
    {
        //
        // see if game is over
        // replace used tiles on rack
        //
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        GameService.OnMoveRequest -= HandleMoveButtonClicked;
    }

    private void HandleMoveSubmitted(ScrabbleMove move)
    {
        var startFrom = new Coord((R)move.StartRow, (C)move.StartColumn);
        var tiles = move.Letters.Select(letter => new Domain.Tile(letter)).ToList();
        currentMove = MoveFactory.CreateMove(startFrom, tiles, move.IsHorizontal);

        //IsBoardValid = currentBoard.IsMoveValid()

        board = board.MakeMove(currentMove);

        StateHasChanged();
    }

    private void HandleSquareClicked(Coord coord)
    {
        // Handle the square click event here
        Console.WriteLine($"Square at Row: {coord.RVal} Col:{coord.CVal} clicked.");
    }

    private void MakeMove()
    {
        Console.WriteLine("Make Move");
    }
}
