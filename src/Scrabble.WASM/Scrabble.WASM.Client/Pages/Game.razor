@page "/"
@inject Services.GameService GameService
<PageTitle>Scrabble</PageTitle>



<GameBoard rack="@rack" board="@board" CurrentPlayer="@currentPlayer" ></GameBoard>
<GameControl OnSubmitMove="HandleMoveSubmitted" />

@code {
    private static Lexicon lexicon = new Lexicon();

    private TileBag tileBag = TileBag.TileBagFactory.Create();

    private Rack rack;

    private Board board;

    private Move? currentMove;

    private int currentPlayer = 0;


    protected override void OnInitialized()
    {
        GameService.OnMoveRequest += HandleMoveButtonClicked;

        List<Tile> rackTiles1;
        (rackTiles1, tileBag) = tileBag.DrawTiles(new TileDrawCount(Rack.Capacity));

        rack = new Rack().AddTiles(rackTiles1);

        board = new Board((s) => true);
        // MoveFactory.CreateMove(new List<TilePlacement>
        //            {
        //             new(new Coord(R._8, C.H), new Tile('B')),
        //             new(new Coord(R._8, C.I), new Tile('A')),
        //             new(new Coord(R._8, C.J), new Tile('L')),
        //             new(new Coord(R._8, C.K), new Tile('L'))
        //            }));     
    }


    private async Task HandleMoveButtonClicked()
    {
        //
        // see if game is over
        // replace used tiles on rack
        //
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        GameService.OnMoveRequest -= HandleMoveButtonClicked;
    }

    private void HandleMoveSubmitted(Move currentMove)
    {

        board = board.MakeMove(currentMove);

        StateHasChanged();
    }

    private void HandleSquareClicked(Coord coord)
    {
        // Handle the square click event here
        Console.WriteLine($"Square at Row: {coord.RVal} Col:{coord.CVal} clicked.");
    }

    private void MakeMove()
    {
        Console.WriteLine("Make Move");
    }
}
