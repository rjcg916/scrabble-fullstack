@page "/"
@rendermode InteractiveWebAssembly
@inject Services.GameService GameService

<PageTitle>Scrabble</PageTitle>

<div>
    <label>Valid State? </label>
    <span>@(IsBoardValid ? "Yes" : "No")</span>
</div>
<div>
    <label>Player</label>
    <span>@(currentPlayer == 0 ? "One" : "Two")</span>
</div>

<GameControl></GameControl>
<GameBoard board="@board" rack="@rack" ></GameBoard>

@code {
    private static Lexicon lexicon = new Lexicon();

    private Board board = new((s) => true);
    private Rack rack = new();

    private Move? currentMove;

    private int currentPlayer = 0;

    private bool IsBoardValid = true;

    protected override void OnInitialized()
    {
        GameService.OnMoveRequest += HandleMoveButtonClicked;

        var tiles = new List<TilePlacement>
            {
                new(new Coord(R._8, C.H), new Tile('B')),
                new(new Coord(R._8, C.I), new Tile('A')),
                new(new Coord(R._8, C.J), new Tile('L')),
                new(new Coord(R._8, C.K), new Tile('L'))
            };
        board.MakeMove(MoveFactory.CreateMove(tiles));

        var initialTiles = new List<Domain.Tile> { new('X'), new('Y') };
        rack = rack.AddTiles(initialTiles);
    }

    private async Task HandleMoveButtonClicked()
    {
        //
        // see if game is over
        // replace used tiles on rack
        //
         await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
         GameService.OnMoveRequest -= HandleMoveButtonClicked;
    }

    private void HandleMoveSubmitted(ScrabbleMoveModel move)
    {
        var startFrom = new Coord((R)move.StartRow, (C)move.StartColumn);
        var tiles = move.Letters.Select(letter => new Domain.Tile(letter)).ToList();
        currentMove = MoveFactory.CreateMove(startFrom, tiles, move.IsHorizontal);

        //IsBoardValid = currentBoard.IsMoveValid()

        board = board.MakeMove(currentMove);

        StateHasChanged();
    }

    private void HandleSquareClicked(Coord coord)
    {
        // Handle the square click event here
        Console.WriteLine($"Square at Row: {coord.RVal} Col:{coord.CVal} clicked.");
    }

    private void MakeMove()
    {
        Console.WriteLine("Make Move");
    }

// //// get current board for move
// var moveBoard = new Board(game.Board);

//     //// get rack for current player
//     var currentRack = game.Players[game.TurnOfPlayer].Rack;
//     var currentLetters = currentRack.GetTiles().Select(t => t.Letter).ToList();
//     var rackUI = new RackUI(currentRack);

//     //// display board
//     var boardUI = new BoardUI(moveBoard);
//     boardUI.DisplayBoard(false);

// //// display rack
// rackUI.DisplayRack();

// var emptySquares = game.Board.GetLocationSquares().Select(ls => ls.Coord).ToList();

    //// place tiles until valid and done

    //var makeMove = false;
    //bool moveValid = false;
    //var theMove = new List<TilePlacement>();

    //do // get letters/locations until done and resulting move valid
    //{
    //    char theLetter = GetValidLetter(currentLetters);
    //    Coord validCoord = GetValidLocation(emptySquares);

    //    theMove.Add(new TilePlacement(validCoord, new Tile(theLetter)));

    //    (moveValid, var errorList) = moveBoard.IsMoveValid(theMove);
    //    if (!moveValid)
    //    {
    //        // display error
    //    }
    //    else
    //    {
    //        // determine if done
    //        makeMove = AskToMakeMove();
    //    }

    //} while (!makeMove && !moveValid);


    // make move on original board and score


    //// move list
    //var moves = new List<List<TilePlacement>>();

    //// make moves

    //// make first move
    //var tiles = new List<TilePlacement>
    //    {
    //        new (new Coord(R._8, C.G), new Tile('C')),
    //        new (new Coord(R._8, C.H), new Tile('A')),
    //        new (new Coord(R._8, C.I), new Tile('R'))
    //    };


    //moveBoard.PlaceTiles(tiles);
    ////moveBoard.ScoreMove(tiles); recording move, getting tiles, scoring ???
    //moves.Add(tiles);

    //boardUI.DisplayBoard();

    // generate a random move using all available tiles in vacant spaces
    //static List<TilePlacement> GetMoveRandom(List<Tile> availableTiles, List<Coord> availableSpaces)
    //{
    //    var tilePlacements = new List<TilePlacement>();

    //    var coord = 0;
    //    foreach (var tile in availableTiles)
    //    {
    //        tilePlacements.Add(new TilePlacement(availableSpaces[coord], tile));
    //        coord++;
    //    }

    //    return tilePlacements;
    //}
}
